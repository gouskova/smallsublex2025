%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 24.02.0 (http://poppler.freedesktop.org)
%%Creator: Matplotlib v3.7.1, https://matplotlib.org
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 370 368
%%HiResBoundingBox: 0 0 369.010625 367.99125
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%BeginResource: font T3_15_0
8 dict begin
/FontType 3 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox [-1016 -351 1660 1068] def
/Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
/BuildGlyph {
  exch /CharProcs get exch
  2 copy known not { pop /.notdef } if
  get exec
} bind def
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
/CharProcs 0 dict def
CharProcs begin
end
currentdict end
/T3_15_0 exch definefont pop
%%EndResource
/F15_0 /T3_15_0 1 1
[ /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
  /parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
  /zero/one/two/three/four/five/six/seven
  /eight/nine/colon/semicolon/less/equal/greater/question
  /at/A/B/C/D/E/F/G
  /H/I/J/K/L/M/N/O
  /P/Q/R/S/T/U/V/W
  /X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
  /quoteleft/a/b/c/d/e/f/g
  /h/i/j/k/l/m/n/o
  /p/q/r/s/t/u/v/w
  /x/y/z/braceleft/bar/braceright/asciitilde/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/exclamdown/cent/sterling/fraction/yen/florin/section
  /currency/quotesingle/quotedblleft/guillemotleft/guilsinglleft/guilsinglright/fi/fl
  /.notdef/endash/dagger/daggerdbl/periodcentered/.notdef/paragraph/bullet
  /quotesinglbase/quotedblbase/quotedblright/guillemotright/ellipsis/perthousand/.notdef/questiondown
  /.notdef/grave/acute/circumflex/tilde/macron/breve/dotaccent
  /dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut/ogonek/caron
  /emdash/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/AE/.notdef/ordfeminine/.notdef/.notdef/.notdef/.notdef
  /Lslash/Oslash/OE/ordmasculine/.notdef/.notdef/.notdef/.notdef
  /.notdef/ae/.notdef/.notdef/.notdef/dotlessi/.notdef/.notdef
  /lslash/oslash/oe/germandbls/.notdef/.notdef/.notdef/.notdef]
pdfMakeFont
%%BeginResource: font T3_20_0
8 dict begin
/FontType 3 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox [-1021 -463 1794 1233] def
/Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
/BuildGlyph {
  exch /CharProcs get exch
  2 copy known not { pop /.notdef } if
  get exec
} bind def
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
/CharProcs 7 dict def
CharProcs begin
/eight {
636 0 68 -13 568 742 setcachedevice
q
318 346 m
271 346 234 333 207 308 c
180 283 167 249 167 205 c
167 161 180 126 207 101 c
234 76 271 64 318 64 c
364 64 401 76 428 102 c
455 127 469 161 469 205 c
469 249 455 283 429 308 c
402 333 365 346 318 346 c
h
219 388 m
177 398 144 418 120 447 c
96 476 85 511 85 553 c
85 611 105 657 147 691 c
188 725 245 742 318 742 c
390 742 447 725 489 691 c
530 657 551 611 551 553 c
551 511 539 476 515 447 c
491 418 459 398 417 388 c
464 377 501 355 528 323 c
554 291 568 251 568 205 c
568 134 546 80 503 43 c
459 5 397 -13 317 -13 c
237 -13 175 5 132 43 c
89 80 68 134 68 205 c
68 251 81 291 108 323 c
134 355 171 377 219 388 c
h
183 544 m
183 506 194 476 218 455 c
242 434 275 424 318 424 c
360 424 393 434 417 455 c
441 476 453 506 453 544 c
453 582 441 611 417 632 c
393 653 360 664 318 664 c
275 664 242 653 218 632 c
194 611 183 582 183 544 c
h
f
Q
} def
/four {
636 0 49 0 580 729 setcachedevice
q
378 643 m
129 254 l
378 254 l
378 643 l
h
352 729 m
476 729 l
476 254 l
580 254 l
580 172 l
476 172 l
476 0 l
378 0 l
378 172 l
49 172 l
49 267 l
352 729 l
h
f
Q
} def
/one {
636 0 110 0 544 729 setcachedevice
q
124 83 m
285 83 l
285 639 l
110 604 l
110 694 l
284 729 l
383 729 l
383 83 l
544 83 l
544 0 l
124 0 l
124 83 l
h
f
Q
} def
/six {
636 0 70 -13 573 742 setcachedevice
q
330 404 m
286 404 251 388 225 358 c
199 328 186 286 186 234 c
186 181 199 139 225 109 c
251 79 286 64 330 64 c
374 64 409 79 435 109 c
461 139 474 181 474 234 c
474 286 461 328 435 358 c
409 388 374 404 330 404 c
h
526 713 m
526 623 l
501 635 476 644 451 650 c
425 656 400 659 376 659 c
310 659 260 637 226 593 c
192 549 172 482 168 394 c
187 422 211 444 240 459 c
269 474 301 482 336 482 c
409 482 467 459 509 415 c
551 371 573 310 573 234 c
573 159 550 99 506 54 c
462 9 403 -13 330 -13 c
246 -13 181 19 137 83 c
92 147 70 241 70 364 c
70 479 97 571 152 639 c
206 707 280 742 372 742 c
396 742 421 739 447 735 c
472 730 498 723 526 713 c
h
f
Q
} def
/three {
636 0 76 -13 556 742 setcachedevice
q
406 393 m
453 383 490 362 516 330 c
542 298 556 258 556 212 c
556 140 531 84 482 45 c
432 6 362 -13 271 -13 c
240 -13 208 -10 176 -4 c
144 1 110 10 76 22 c
76 117 l
103 101 133 89 166 81 c
198 73 232 69 268 69 c
330 69 377 81 409 105 c
441 129 458 165 458 212 c
458 254 443 288 413 312 c
383 336 341 349 287 349 c
202 349 l
202 430 l
291 430 l
339 430 376 439 402 459 c
428 478 441 506 441 543 c
441 580 427 609 401 629 c
374 649 336 659 287 659 c
260 659 231 656 200 650 c
169 644 135 635 98 623 c
98 711 l
135 721 170 729 203 734 c
235 739 266 742 296 742 c
370 742 429 725 473 691 c
517 657 539 611 539 553 c
539 513 527 479 504 451 c
481 423 448 403 406 393 c
h
f
Q
} def
/two {
636 0 73 0 536 742 setcachedevice
q
192 83 m
536 83 l
536 0 l
73 0 l
73 83 l
110 121 161 173 226 239 c
290 304 331 346 348 365 c
380 400 402 430 414 455 c
426 479 433 504 433 528 c
433 566 419 598 392 622 c
365 646 330 659 286 659 c
255 659 222 653 188 643 c
154 632 117 616 78 594 c
78 694 l
118 710 155 722 189 730 c
223 738 255 742 284 742 c
359 742 419 723 464 685 c
509 647 532 597 532 534 c
532 504 526 475 515 449 c
504 422 484 390 454 354 c
446 344 420 317 376 272 c
332 227 271 164 192 83 c
h
f
Q
} def
/zero {
636 0 66 -13 570 742 setcachedevice
q
318 664 m
267 664 229 639 203 589 c
177 539 165 464 165 364 c
165 264 177 189 203 139 c
229 89 267 64 318 64 c
369 64 407 89 433 139 c
458 189 471 264 471 364 c
471 464 458 539 433 589 c
407 639 369 664 318 664 c
h
318 742 m
399 742 461 709 505 645 c
548 580 570 486 570 364 c
570 241 548 147 505 83 c
461 19 399 -13 317 -13 c
235 -13 173 19 130 83 c
87 147 66 241 66 364 c
66 486 87 580 130 645 c
173 709 236 742 318 742 c
h
f
Q
} def
end
currentdict end
/T3_20_0 exch definefont pop
%%EndResource
/F20_0 /T3_20_0 1 1
[ /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
  /parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
  /zero/one/two/three/four/five/six/seven
  /eight/nine/colon/semicolon/less/equal/greater/question
  /at/A/B/C/D/E/F/G
  /H/I/J/K/L/M/N/O
  /P/Q/R/S/T/U/V/W
  /X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
  /quoteleft/a/b/c/d/e/f/g
  /h/i/j/k/l/m/n/o
  /p/q/r/s/t/u/v/w
  /x/y/z/braceleft/bar/braceright/asciitilde/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/exclamdown/cent/sterling/fraction/yen/florin/section
  /currency/quotesingle/quotedblleft/guillemotleft/guilsinglleft/guilsinglright/fi/fl
  /.notdef/endash/dagger/daggerdbl/periodcentered/.notdef/paragraph/bullet
  /quotesinglbase/quotedblbase/quotedblright/guillemotright/ellipsis/perthousand/.notdef/questiondown
  /.notdef/grave/acute/circumflex/tilde/macron/breve/dotaccent
  /dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut/ogonek/caron
  /emdash/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/AE/.notdef/ordfeminine/.notdef/.notdef/.notdef/.notdef
  /Lslash/Oslash/OE/ordmasculine/.notdef/.notdef/.notdef/.notdef
  /.notdef/ae/.notdef/.notdef/.notdef/dotlessi/.notdef/.notdef
  /lslash/oslash/oe/germandbls/.notdef/.notdef/.notdef/.notdef]
pdfMakeFont
%%BeginResource: font T3_31_0
8 dict begin
/FontType 3 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox [-1082 -256 6171 1125] def
/Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
/BuildGlyph {
  exch /CharProcs get exch
  2 copy known not { pop /.notdef } if
  get exec
} bind def
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
/CharProcs 14 dict def
CharProcs begin
/C {
646 0 37 -9 611 658 setcachedevice
q
357 -9 m
454 -9 543 36 611 125 c
606 134 599 140 588 140 c
517 62 449 31 356 31 c
221 31 128 183 128 329 c
128 415 150 487 187 532 c
237 593 295 621 347 621 c
485 621 540 539 566 453 c
578 449 587 452 599 458 c
594 510 587 558 577 613 c
526 618 481 658 358 658 c
273 658 202 627 143 573 c
76 512 37 414 37 310 c
37 136 142 -9 357 -9 c
h
f
Q
} def
/F {
485 0 12 -1 475 649 setcachedevice
q
283 323 m
368 323 371 300 374 255 c
380 249 401 249 407 255 c
406 280 405 308 405 343 c
405 376 406 403 407 429 c
401 435 380 435 374 429 c
371 374 368 361 283 361 c
190 361 l
190 541 l
190 595 202 605 246 605 c
291 605 l
397 605 422 565 444 496 c
456 496 467 498 475 501 c
469 542 454 638 453 646 c
452 648 451 649 449 649 c
431 645 427 645 402 645 c
147 645 l
115 645 58 646 18 647 c
12 641 12 620 18 614 c
88 611 105 606 105 523 c
105 122 l
105 39 88 34 18 31 c
12 25 12 4 18 -1 c
53 0 103 0 148 0 c
193 0 242 0 277 -1 c
283 4 283 25 277 31 c
207 34 190 39 190 122 c
190 323 l
283 323 l
h
f
Q
} def
/a {
457 0 36 -9 455 439 setcachedevice
q
293 233 m
293 101 l
293 88 287 81 279 75 c
253 54 219 31 191 31 c
141 31 119 71 119 102 c
119 147 140 193 214 212 c
293 233 l
h
293 48 m
299 17 309 -9 360 -9 c
398 -9 434 7 455 27 c
453 39 449 47 438 54 c
430 47 413 38 401 38 c
372 38 371 77 371 123 c
371 270 l
371 412 293 439 220 439 c
138 439 55 385 55 328 c
55 304 67 292 90 292 c
119 292 137 313 137 326 c
137 333 136 340 134 344 c
133 347 132 353 132 364 c
132 395 174 406 212 406 c
246 406 293 389 293 276 c
293 269 290 265 287 264 c
201 243 l
105 219 36 166 36 98 c
36 16 92 -9 162 -9 c
196 -9 227 -1 271 32 c
291 48 l
293 48 l
h
f
Q
} def
/e {
447 0 37 -9 407 437 setcachedevice
q
124 282 m
143 395 213 404 237 404 c
275 404 320 383 320 299 c
320 290 316 285 305 285 c
124 282 l
h
386 93 m
349 55 320 39 262 39 c
226 39 184 60 153 111 c
133 144 121 190 121 248 c
387 246 l
399 246 406 252 406 263 c
406 347 376 437 237 437 c
150 437 37 354 37 202 c
37 146 51 92 84 54 c
118 14 165 -9 237 -9 c
313 -9 367 25 407 77 c
404 87 398 92 386 93 c
h
f
Q
} def
/j {
272 0 -47 -222 199 647 setcachedevice
q
99 599 m
99 573 123 547 147 547 c
175 547 199 573 199 595 c
199 619 178 647 151 647 c
127 647 99 623 99 599 c
h
113 317 m
113 76 l
113 -55 109 -178 59 -178 c
48 -178 35 -174 28 -167 c
18 -157 6 -141 -15 -141 c
-26 -141 -47 -161 -47 -179 c
-47 -208 -11 -222 7 -222 c
28 -222 80 -219 117 -188 c
164 -150 192 -78 192 110 c
192 321 l
192 371 196 435 196 435 c
196 439 191 442 183 442 c
155 431 115 422 46 413 c
44 407 46 391 48 385 c
102 380 113 374 113 317 c
h
f
Q
} def
/n {
542 0 20 -1 530 442 setcachedevice
q
184 358 m
177 351 172 348 172 358 c
171 385 168 423 164 434 c
161 438 160 442 152 442 c
124 431 98 422 29 413 c
27 407 29 391 31 385 c
85 380 96 375 96 317 c
96 122 l
96 40 86 36 26 31 c
20 25 20 4 26 -1 c
56 0 96 0 136 0 c
176 0 206 0 236 -1 c
242 4 242 25 236 31 c
185 36 175 40 175 122 c
175 286 l
175 307 184 319 192 328 c
230 365 275 387 314 387 c
334 387 355 374 367 351 c
377 331 379 304 379 274 c
379 122 l
379 40 369 36 317 31 c
312 25 312 4 317 -1 c
347 0 379 0 419 0 c
459 0 495 0 525 -1 c
530 4 530 25 525 31 c
469 36 458 40 458 122 c
458 271 l
458 326 454 374 431 405 c
414 427 383 439 348 439 c
299 439 243 426 184 358 c
h
f
Q
} def
/o {
504 0 41 -9 463 439 setcachedevice
q
41 205 m
41 103 109 -9 251 -9 c
315 -9 363 12 397 46 c
442 89 463 152 463 214 c
463 318 406 439 253 439 c
187 439 132 412 96 369 c
60 326 41 268 41 205 c
h
238 404 m
324 404 377 326 377 182 c
377 56 312 25 265 25 c
161 25 127 151 127 228 c
127 315 148 404 238 404 c
h
f
Q
} def
/q {
503 0 35 -233 503 442 setcachedevice
q
322 368 m
342 346 346 331 346 307 c
346 77 l
346 59 345 54 332 47 c
308 35 281 34 266 34 c
208 34 121 76 121 227 c
121 331 163 405 243 405 c
273 405 300 392 322 368 c
h
346 -110 m
346 -193 335 -197 274 -200 c
268 -206 268 -227 274 -233 c
309 -232 346 -231 386 -231 c
426 -231 464 -232 497 -233 c
503 -227 503 -206 497 -200 c
436 -197 425 -193 425 -110 c
425 417 l
425 431 421 442 410 442 c
403 442 397 434 389 423 c
376 405 372 402 360 409 c
328 430 289 439 247 439 c
125 439 35 339 35 207 c
35 114 98 -9 242 -9 c
269 -9 301 -4 319 5 c
342 19 346 21 346 0 c
346 -110 l
h
f
Q
} def
/r {
372 0 20 -1 358 442 setcachedevice
q
176 358 m
174 398 172 423 168 434 c
165 438 164 442 156 442 c
128 431 102 422 33 413 c
31 407 33 391 35 385 c
89 380 100 375 100 317 c
100 122 l
100 39 88 35 26 31 c
20 25 20 4 26 -1 c
61 0 100 0 140 0 c
180 0 226 0 261 -1 c
267 4 267 25 261 31 c
191 36 179 39 179 122 c
179 261 l
179 287 191 310 203 328 c
214 344 237 377 249 377 c
258 377 267 374 274 364 c
282 354 293 341 311 341 c
335 341 358 366 358 391 c
358 410 340 439 298 439 c
251 439 210 395 187 356 c
181 345 176 353 176 358 c
h
f
Q
} def
/s {
390 0 48 -9 350 439 setcachedevice
q
48 138 m
52 89 55 42 55 0 c
65 2 75 3 80 3 c
87 3 93 3 100 1 c
127 -5 154 -9 191 -9 c
247 -9 350 17 350 116 c
350 184 301 224 233 249 c
172 271 133 287 133 342 c
133 383 169 406 203 406 c
225 406 283 398 296 313 c
302 307 322 308 328 314 c
331 350 333 387 334 420 c
303 425 255 439 203 439 c
129 439 62 391 62 327 c
62 254 95 223 172 191 c
255 157 274 136 274 93 c
274 44 226 23 189 23 c
150 23 128 36 118 47 c
96 70 85 114 79 139 c
73 145 54 144 48 138 c
h
f
Q
} def
/space {
250 0 0 0 0 0 setcachedevice
q
Q
} def
/t {
316 0 25 -9 301 581 setcachedevice
q
43 429 m
29 429 25 417 25 409 c
25 396 l
25 391 26 390 30 390 c
89 390 l
89 89 l
89 18 120 -9 166 -9 c
212 -9 262 12 301 56 c
299 66 293 72 283 73 c
257 53 227 45 201 45 c
174 45 168 75 168 137 c
168 390 l
272 390 l
282 390 296 394 296 403 c
296 423 l
296 427 293 429 288 429 c
168 429 l
168 468 l
168 533 172 573 172 573 c
172 579 169 581 164 581 c
159 581 151 577 142 572 c
130 566 120 562 108 558 c
96 555 86 551 86 545 c
86 533 89 540 89 429 c
43 429 l
h
f
Q
} def
/u {
531 0 20 -12 521 431 setcachedevice
q
217 -9 m
256 -9 303 10 352 50 c
357 54 366 56 367 49 c
369 23 378 -9 378 -9 c
386 -12 390 -12 397 -9 c
419 8 454 23 515 30 c
521 36 521 51 515 57 c
451 62 442 81 442 130 c
442 322 l
442 352 446 425 446 425 c
446 428 443 431 438 431 c
433 430 418 429 403 429 c
371 429 335 430 301 431 c
295 425 295 404 301 398 c
350 395 363 383 363 317 c
363 124 l
363 105 361 97 347 85 c
310 53 272 37 247 37 c
217 37 167 51 167 140 c
167 322 l
167 352 171 425 171 425 c
171 428 168 431 163 431 c
158 430 143 429 128 429 c
96 429 60 430 26 431 c
20 425 20 404 26 398 c
74 394 88 383 88 318 c
88 126 l
88 57 118 -9 217 -9 c
h
f
Q
} def
/y {
515 0 10 -231 509 431 setcachedevice
q
204 -159 m
219 -132 232 -103 245 -73 c
325 119 369 221 422 334 c
441 376 456 392 503 398 c
509 404 509 425 503 431 c
483 430 460 429 432 429 c
402 429 371 430 341 431 c
335 425 335 404 341 398 c
372 395 405 389 389 353 c
289 124 l
282 107 274 105 265 125 c
177 333 l
159 375 154 393 210 398 c
216 404 216 425 210 431 c
173 430 133 429 97 429 c
63 429 36 430 16 431 c
10 425 10 404 16 398 c
55 393 68 384 94 323 c
208 60 l
216 39 232 -5 222 -33 c
210 -67 198 -94 183 -125 c
172 -145 158 -154 133 -154 c
119 -154 115 -151 104 -151 c
75 -151 60 -181 60 -194 c
60 -215 80 -231 107 -231 c
128 -231 168 -223 204 -159 c
h
f
Q
} def
end
currentdict end
/T3_31_0 exch definefont pop
%%EndResource
/F31_0 /T3_31_0 1 1
[ /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
  /parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
  /zero/one/two/three/four/five/six/seven
  /eight/nine/colon/semicolon/less/equal/greater/question
  /at/A/B/C/D/E/F/G
  /H/I/J/K/L/M/N/O
  /P/Q/R/S/T/U/V/W
  /X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
  /quoteleft/a/b/c/d/e/f/g
  /h/i/j/k/l/m/n/o
  /p/q/r/s/t/u/v/w
  /x/y/z/braceleft/bar/braceright/asciitilde/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/exclamdown/cent/sterling/fraction/yen/florin/section
  /currency/quotesingle/quotedblleft/guillemotleft/guilsinglleft/guilsinglright/fi/fl
  /.notdef/endash/dagger/daggerdbl/periodcentered/.notdef/paragraph/bullet
  /quotesinglbase/quotedblbase/quotedblright/guillemotright/ellipsis/perthousand/.notdef/questiondown
  /.notdef/grave/acute/circumflex/tilde/macron/breve/dotaccent
  /dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut/ogonek/caron
  /emdash/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/AE/.notdef/ordfeminine/.notdef/.notdef/.notdef/.notdef
  /Lslash/Oslash/OE/ordmasculine/.notdef/.notdef/.notdef/.notdef
  /.notdef/ae/.notdef/.notdef/.notdef/dotlessi/.notdef/.notdef
  /lslash/oslash/oe/germandbls/.notdef/.notdef/.notdef/.notdef]
pdfMakeFont
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 369.010625 367.99125 re
W
q
/DeviceRGB {} CS
[0 0 0] SC
/DeviceRGB {} cs
[0 0 0] sc
1 j
/DeviceGray {} cs
[1] sc
0 j
0 w
/DeviceGray {} CS
[1] SC
/DeviceGray {} cs
[1] sc
0 0 369.010625 367.99125 re
f
/DeviceGray {} CS
[0] SC
51.090625 47.73125 310.72 313.06 re
f
/DeviceGray {} cs
[0.15] sc
1 j
1.25 w
/DeviceGray {} CS
[0.15] SC
/DeviceGray {} cs
[0.15] sc
128.770625 47.73125 m
128.770625 41.73125 l
f
128.770625 47.73125 m
128.770625 41.73125 l
S
1 w
q
[1 0 0 1 121.770625 29.871875] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0.984375 Td
/F20_0 11 Tf
(1)
[6.996
0] Tj
q
[0.011 0 0 0.011 6.998535 0.984375] cm
q
[1 0 0 1 0 0] cm
-1016 -351 2676 1419 re
W
347 476 m
297 476 255 458 222 422 c
186 384 163 335 151 273 c
138 207 142 156 163 118 c
183 80 218 62 267 62 c
314 62 355 80 391 118 c
426 156 450 207 463 273 c
474 332 470 382 450 422 c
431 458 397 476 347 476 c
h
361 547 m
659 547 l
642 457 l
541 457 l
566 406 572 345 559 273 c
541 183 505 113 451 63 c
396 12 329 -13 251 -13 c
173 -13 116 12 82 63 c
47 113 39 183 57 273 c
74 363 110 433 164 484 c
209 526 275 547 361 547 c
h
f
Q
Q
Q
1.25 w
284.130625 47.73125 m
284.130625 41.73125 l
f
284.130625 47.73125 m
284.130625 41.73125 l
S
1 w
q
[1 0 0 1 277.130625 29.871875] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0.828125 Td
/F20_0 11 Tf
(2)
[6.996
0] Tj
q
[0.011 0 0 0.011 6.998535 0.828125] cm
q
[1 0 0 1 0 0] cm
-1016 -351 2676 1419 re
W
347 476 m
297 476 255 458 222 422 c
186 384 163 335 151 273 c
138 207 142 156 163 118 c
183 80 218 62 267 62 c
314 62 355 80 391 118 c
426 156 450 207 463 273 c
474 332 470 382 450 422 c
431 458 397 476 347 476 c
h
361 547 m
659 547 l
642 457 l
541 457 l
566 406 572 345 559 273 c
541 183 505 113 451 63 c
396 12 329 -13 251 -13 c
173 -13 116 12 82 63 c
47 113 39 183 57 273 c
74 363 110 433 164 484 c
209 526 275 547 361 547 c
h
f
Q
Q
Q
q
[1 0 0 1 171.856875 11.2625] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0 Td
/F31_0 17.28 Tf
(Freq astyj)
[8.3808
0
6.42816
0
7.72416
0
8.69184
0
4.32
0
7.89696
0
6.7392
0
5.46048
0
8.8992
0
4.70016
0] Tj
Q
1.25 w
51.090625 47.73125 m
45.090625 47.73125 l
f
51.090625 47.73125 m
45.090625 47.73125 l
S
1 w
q
[1 0 0 1 34.590625 43.551562] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0 Td
/F20_0 11 Tf
(0)
[6.996
0] Tj
Q
1.25 w
51.090625 90.324447 m
45.090625 90.324447 l
f
51.090625 90.324447 m
45.090625 90.324447 l
S
1 w
q
[1 0 0 1 34.590625 86.14476] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0 Td
/F20_0 11 Tf
(2)
[6.996
0] Tj
Q
1.25 w
51.090625 132.917645 m
45.090625 132.917645 l
f
51.090625 132.917645 m
45.090625 132.917645 l
S
1 w
q
[1 0 0 1 34.590625 128.737957] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0 Td
/F20_0 11 Tf
(4)
[6.996
0] Tj
Q
1.25 w
51.090625 175.510842 m
45.090625 175.510842 l
f
51.090625 175.510842 m
45.090625 175.510842 l
S
1 w
q
[1 0 0 1 34.590625 171.331154] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0 Td
/F20_0 11 Tf
(6)
[6.996
0] Tj
Q
1.25 w
51.090625 218.104039 m
45.090625 218.104039 l
f
51.090625 218.104039 m
45.090625 218.104039 l
S
1 w
q
[1 0 0 1 34.590625 213.924352] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0 Td
/F20_0 11 Tf
(8)
[6.996
0] Tj
Q
1.25 w
51.090625 260.697236 m
45.090625 260.697236 l
f
51.090625 260.697236 m
45.090625 260.697236 l
S
1 w
q
[1 0 0 1 27.590625 256.517549] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0 Td
/F20_0 11 Tf
(10)
[6.996
0
6.996
0] Tj
Q
1.25 w
51.090625 303.290434 m
45.090625 303.290434 l
f
51.090625 303.290434 m
45.090625 303.290434 l
S
1 w
q
[1 0 0 1 27.590625 299.110746] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0 Td
/F20_0 11 Tf
(12)
[6.996
0
6.996
0] Tj
Q
1.25 w
51.090625 345.883631 m
45.090625 345.883631 l
f
51.090625 345.883631 m
45.090625 345.883631 l
S
1 w
q
[1 0 0 1 27.590625 341.703943] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0 Td
/F20_0 11 Tf
(14)
[6.996
0
6.996
0] Tj
Q
q
[0 1 -1 0 19.528125 182.339375] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0 Td
/F31_0 17.28 Tf
(Count)
[11.16288
0
8.70912
0
9.17568
0
9.36576
0
5.46048
0] Tj
Q
q
51.090625 47.73125 310.72 313.06 re
W
/DeviceGray {} cs
[0] sc
0 j
/DeviceGray {} CS
[1] SC
/DeviceGray {} cs
[0] sc
66.626625 47.73125 124.288 298.152381 re
f
66.626625 47.73125 124.288 298.152381 re
S
Q
q
51.090625 47.73125 310.72 313.06 re
W
/DeviceRGB {} cs
[0.875 0.875 0.125] sc
0 j
/DeviceGray {} CS
[1] SC
/DeviceRGB {} cs
[0.875 0.875 0.125] sc
221.986625 47.73125 124.288 63.889796 re
f
221.986625 47.73125 124.288 63.889796 re
S
Q
q
51.090625 47.73125 310.72 313.06 re
W
1 J
2.25 w
/DeviceGray {} CS
[0.26] SC
/DeviceRGB {} cs
[0 0 0] sc
Q
q
51.090625 47.73125 310.72 313.06 re
W
1 J
2.25 w
/DeviceGray {} CS
[0.26] SC
/DeviceRGB {} cs
[0 0 0] sc
Q
q
2 J
0 j
1.25 w
/DeviceRGB {} cs
[0 0 0] sc
51.090625 47.73125 m
51.090625 360.79125 l
S
51.090625 47.73125 m
361.810625 47.73125 l
S
0 J
/DeviceGray {} cs
[0.15] sc
1 j
1 w
/DeviceGray {} cs
[0.15] sc
q
[1 0 0 1 121.13 348.383631] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0 Td
/F20_0 12 Tf
(14)
[7.632
0
7.632
0] Tj
Q
q
[1 0 0 1 280.310312 114.121046] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0 Td
/F20_0 12 Tf
(3)
[7.632
0] Tj
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%+ font T3_15_0
%%+ font T3_20_0
%%+ font T3_31_0
%%EOF
